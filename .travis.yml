sudo: required

language: cpp

dist: bionic

group: edge

matrix:
  include:
    # VM-based 64-bit skylake build (GCC)
    - os: linux
      dist: bionic
      sudo: required
      compiler: gcc
      env:
      - DISTRIBUTION=ubuntu/bionic
      - DEPLOY_PACKAGE=true
      - DEPLOY_IMAGE=true
      - GENERIC_BUILD=false
      script:
      - bash ./CI/runci.sh ubuntu-18.04
      - source ./CI/prepare-docker-image.sh
    - arch: arm64
      os: linux
      dist: bionic
      sudo: required
      compiler: gcc
      env:
      - DISTRIBUTION=ubuntu/bionic
      - DEPLOY_PACKAGE=true
      - DEPLOY_IMAGE=true
      - GENERIC_BUILD=false
      script:
      - bash ./CI/runci.sh ubuntu-18.04
      - source ./CI/prepare-docker-image.sh
    # VM-based 64-bit generic build (GCC)
    - os: linux
      dist: bionic
      sudo: required
      compiler: gcc
      env:
      - DISTRIBUTION=ubuntu/bionic
      - DEPLOY_PACKAGE=false
      - DEPLOY_IMAGE=true
      - GENERIC_BUILD=true
      script:
      - bash ./CI/runci.sh ubuntu-18.04
      - source ./CI/prepare-docker-image.sh
      if: branch = master OR tag IS present
    - arch: rm64
      os: linux
      dist: bionic
      sudo: required
      compiler: gcc
      env:
      - DISTRIBUTION=ubuntu/bionic
      - DEPLOY_PACKAGE=false
      - DEPLOY_IMAGE=true
      - GENERIC_BUILD=true
      script:
      - bash ./CI/runci.sh ubuntu-18.04
      - source ./CI/prepare-docker-image.sh
      if: branch = master OR tag IS present
    # VM-based 64-bit build (Clang)
    - os: linux
      dist: bionic
      sudo: required
      compiler: clang
      env:
      - DISTRIBUTION=ubuntu/bionic
      - DEPLOY_PACKAGE=false
      - DEPLOY_IMAGE=false
      - GENERIC_BUILD=false
      #- DEBUG_BUILD=true
      script:
      - bash ./CI/runci.sh ubuntu-18.04
      if: branch = master OR tag IS present
    - arch: arm64
      os: linux
      dist: bionic
      sudo: required
      compiler: clang
      env:
      - DISTRIBUTION=ubuntu/bionic
      - DEPLOY_PACKAGE=false
      - DEPLOY_IMAGE=false
      - GENERIC_BUILD=false
      #- DEBUG_BUILD=true
      script:
      - bash ./CI/runci.sh ubuntu-18.04
      if: branch = master OR tag IS present
    # VM-based 64-bit WAL check build (GCC)
    - os: linux
      dist: bionic
      sudo: required
      compiler: gcc
      env:
      - DISTRIBUTION=ubuntu/bionic
      - DEPLOY_PACKAGE=false
      - DEPLOY_IMAGE=false
      - GENERIC_BUILD=false
      #- DEBUG_BUILD=true
      script:
      - bash ./CI/runci.sh ubuntu-18.04-wal
    # Container based 32-bit Xenial build
    - os: linux
      dist: trusty
      sudo: required
      services:
      - docker
      env:
      - DISTRIBUTION=ubuntu/xenial
      - DEPLOY_PACKAGE=false
      - DEPLOY_IMAGE=false
      - GENERIC_BUILD=false
      before_install:
      - docker pull i386/ubuntu:xenial
      script:
      - echo "Disabled"
      # Disabled because build fails due to timeout because of the slow ubuntu mirror
      #- docker run --log-driver=none -a stdin -a stdout -a stderr --rm -ti -u root -e FORCE_ARCH=i386 -e GENERIC_BUILD='false' -v "${TRAVIS_BUILD_DIR}":/opt/akumuli -w /opt/akumuli i386/ubuntu:xenial ./CI/runci.sh ubuntu-16.04
    # Container based 64-bit Xenial build
    - os: linux
      dist: bionic
      sudo: required
      services:
      - docker
      env:
      - DISTRIBUTION=ubuntu/xenial
      - DEPLOY_PACKAGE=true
      - DEPLOY_IMAGE=false
      - GENERIC_BUILD=false
      before_install:
      - sudo docker pull ubuntu:16.04
      script:
      - sudo docker run --log-driver=none -a stdin -a stdout -a stderr --rm -ti -u root -e GENERIC_BUILD='false' -v "${TRAVIS_BUILD_DIR}":/opt/akumuli -w /opt/akumuli ubuntu:16.04 ./CI/runci.sh ubuntu-16.04
      if: branch = master OR tag IS present
    # Container based 64-bit Debian Stretch build
    - os: linux
      dist: bionic
      sudo: required
      services:
      - docker
      env:
      - DISTRIBUTION=debian/stretch
      - DEPLOY_PACKAGE=true
      - DEPLOY_IMAGE=false
      - GENERIC_BUILD=false
      before_install:
      - sudo docker pull debian:stretch
      script:
      - sudo docker run --log-driver=none -a stdin -a stdout -a stderr --rm -ti -u root -e GENERIC_BUILD='false' -v "${TRAVIS_BUILD_DIR}":/opt/akumuli -w /opt/akumuli debian:stretch ./CI/runci.sh debian-stretch
      if: branch = master OR tag IS present
    # Container based 64-bit Debian Jessie build
    - os: linux
      dist: bionic
      sudo: required
      services:
      - docker
      env:
      - DISTRIBUTION=debian/jessie
      - DEPLOY_PACKAGE=true
      - DEPLOY_IMAGE=false
      - GENERIC_BUILD=false
      before_install:
      - sudo docker pull debian:jessie
      script:
      - sudo docker run --log-driver=none -a stdin -a stdout -a stderr --rm -ti -u root -e GENERIC_BUILD='false' -v "${TRAVIS_BUILD_DIR}":/opt/akumuli -w /opt/akumuli debian:jessie ./CI/runci.sh debian-jessie
      if: branch = master OR tag IS present
    # Container based 64-bit CentOS 7 build
    - os: linux
      dist: bionic
      sudo: required
      services:
      - docker
      env:
      - DISTRIBUTION=el/7
      - DEPLOY_PACKAGE=true
      - DEPLOY_IMAGE=false
      - GENERIC_BUILD=false
      before_install:
      - sudo docker pull centos:centos7
      script:
      - sudo docker run --log-driver=none -a stdin -a stdout -a stderr --rm -ti -u root -e GENERIC_BUILD='false' -v "${TRAVIS_BUILD_DIR}":/opt/akumuli -w /opt/akumuli centos:centos7 ./CI/runci.sh centos7
      if: branch = master OR tag IS present
env:
  global:
  - secure: DHaTv1euwlpVgePMbw0LEBihzru8VP5RmY7/TUdEpS1dBlJx6nyT6lgmyRcdb19RmTBUXZl1hm7Zu8TfqJJgfty4o9EnpLfTHbY7JwglSqbOo7b/FNAa1Qi0RhVDwc/WvFJDYBUvOtPtVQbPtVtECXm8PZcRqfOuEjkbHmmnIk8=

# Ship Akumuli logs to the S3 bucket
addons:
  artifacts:
    provider: s3
    s3_region: us-west-2
    access_key_id: "$ARTIFACTS_KEY"
    secret_access_key: "$ARTIFACTS_SECRET"
    bucket: "$ARTIFACTS_BUCKET"
    acl: public_read
    paths:
    - "${TRAVIS_BUILD_DIR}/akumuli.log"

# Packagecloud deployment configuration
deploy:
  provider: packagecloud
  repository: Akumuli
  username: Lazin
  dist: $DISTRIBUTION
  package_glob: "${TRAVIS_BUILD_DIR}/build/*.{deb,rpm}"
  token:
    secure: TNIqxlIMy4PUJIn65Yl7dyr1A+TVCMSCOUZOd/XlqlmjntFbxdBKY2M+bX5Cc+uOvNNxFU0m0/RpxYibeN8Juo3BTV0B8YJ4Hjr60F+Sag0UFvvDmxd4vzK+rm+XbYyyx0ukO2ETUxEqxaJaEi0CJPEvEiIeXyJAzIytoVNukkM=
  on:
    tags: true
    condition: $DEPLOY_PACKAGE = "true"
  skip_cleanup: true

after_success:
# Push docker image. Docker image should be created and the variables REPO,
# VERSION, and TAG should exist.
- if [[ $TRAVIS_PULL_REQUEST == "false" && $DEPLOY_IMAGE == "true" ]]; then
      echo "Pushing to $REPO $VERSION $TAG";
      sudo docker login -u "$DOCKER_USER" -p "$DOCKER_PASS";
      sudo docker push $REPO:$VERSION-$TAG;
  fi 
after_failure: 
- echo "Build failed"
